package main

import (
	"fmt"
	"math"
)

// Функции Go способны возвращать сразу несколько значений, что очень удобно для нас.
// Мы будет пользоваться математическими функциями, которые используеют тип float64. Помимо этого, данный тип
// обладающий плавающей точкой, позволит получать более точные значения и решать уравнения с дробными корнями.

var x1, x2, x3, x4 float64
var countSlove, a, b, c, d float64

func findSolve() {
	diskriminant()
	D := &d
	if *D > 0 {
		two()
	}
	if *D == 0 {
		one()
	}
	if *D < 0 {
		complexKorn()
	}

}

// Функция возвращает дискриминант, ничего необычного.
func diskriminant() {
	A := &a
	B := &b
	C := &c
	D := &d
	*D = *A*(*B) - 4*(*A)*(*C)
}

// Функции one, two созданы для дискриминанта >=0.
func one() {
	fmt.Println(`1 действительный корень.`)
	A := &a
	B := &b
	CountSlove := &countSlove
	*CountSlove = 1
	X1 := &x1
	X2 := &x2
	X3 := &x3
	X4 := &x4
	*X1 = (-(*B)) / (2 * (*A))
	*X2 = 0
	*X3 = 0
	*X4 = 0
}
func two() {
	fmt.Println(`2 действительных корня.`)
	A := &a
	B := &b
	D := &d
	CountSlove := &countSlove
	*CountSlove = 2
	X1 := &x1
	X2 := &x2
	X3 := &x3
	X4 := &x4
	*X1 = (-(*B) + (math.Sqrt(float64(*D)))) / (2 * (*A))
	*X2 = (-(*B) - (math.Sqrt(float64(*D)))) / (2 * (*A))
	*X3 = 0
	*X4 = 0
}

// Эта функция позволяет находить мнимые корни. Благо go обладает пакетом для работы с такими числами.
// Если дискриминант<0 уравнение обладает двумя мнимыми корнями, которые легко находятся по формулам.
// x1=(-b+sqrt(D))/(2a)
// x2=(-b-sqrt(D))/(2a)
func complexKorn() {
	fmt.Println(`2 комплексных корня.`)
	A := &a
	B := &b
	D := &d
	CountSlove := &countSlove
	*CountSlove = 4
	X1 := &x1
	X2 := &x2
	X3 := &x3
	X4 := &x4
	//Реальная часть первого числа
	*X1 = (-(*B)) / (2 * (*A))
	//Мнимая часть первого число
	*X2 = (math.Sqrt(math.Abs(*D))) / (2 * (*A))
	//Реальная часть второго числа
	*X3 = (-(*B)) / (2 * (*A))
	//Мнимая часть второго числа
	*X4 = (-1) * (math.Sqrt(math.Abs(*D))) / (2 * (*A))
}
func main() {
	fmt.Println(`//////////////////////////////////////////////////////////////////`)
	a, b, c = 3, 7, -6
	fmt.Println(`Корни: `, a, b, c)
	findSolve()
	fmt.Println(`Ответ: `, x1, `, `, x2, `, `, x3, `, `, x4)
	fmt.Println(`//////////////////////////////////////////////////////////////////`)
	a, b, c = -1, 7, 8
	fmt.Println(`Корни: `, a, b, c)
	findSolve()
	fmt.Println(`Ответ: `, x1, `, `, x2, `, `, x3, `, `, x4)
	fmt.Println(`//////////////////////////////////////////////////////////////////`)
	a, b, c = 4, 4, 1
	fmt.Println(`Корни: `, a, b, c)
	findSolve()
	fmt.Println(`Ответ: `, x1, `, `, x2, `, `, x3, `, `, x4)
	fmt.Println(`//////////////////////////////////////////////////////////////////`)
	a, b, c = 2, 1, 1
	fmt.Println(`Корни: `, a, b, c)
	findSolve()
	fmt.Println(`Ответ: `, x1, `, `, x2, `, `, x3, `, `, x4)
	fmt.Println(`//////////////////////////////////////////////////////////////////`)
	a, b, c = 1, -4, 5
	fmt.Println(`Корни: `, a, b, c)
	findSolve()
	fmt.Println(`Ответ: `, x1, `, `, x2, `, `, x3, `, `, x4)
}
